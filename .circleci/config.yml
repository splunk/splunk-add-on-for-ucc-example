##
## SPDX-FileCopyrightText: 2020 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-1-2020
##
##

version: 2.1
orbs:
  go: circleci/go@0.2.0
  splunk-app-package:
    executors:
      python27:
        docker:
          - image: circleci/python:3.7
    commands:
      package:
        steps:
          - run:
              name: Generating package
              command: |
                sudo ./build.sh

    jobs:
      package:
        executor: python27
        steps:
          - checkout
          - package
          - persist_to_workspace:
              root: /home/circleci/project
              paths:
                - output
                - build
          - store_artifacts:
              path: build/package/splunkbase
              destination: build-package-splunkbase
          - store_artifacts:
              path: build/package/deployment
              destination: build-package-deployment
          - store_artifacts:
              path: build/VERSION
              destination: build-version
  splunk-app-inspect:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        steps:
          - run:
              name: Install
              command: |
                python -m venv ~/.venv
                source ~/.venv/bin/activate
                pip install https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
          - run:
              name: inspect
              command: |
                source ~/.venv/bin/activate
                mkdir test-results || true
                PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
                if [ "<<parameters.label>>" == "cloud" ]; then TEST_PARM="--mode precert --included-tags cloud"; fi
                if [ "<<parameters.label>>" == "appinspect" ]; then TEST_PARM="--mode test"; fi
                splunk-appinspect inspect <<parameters.options>> --data-format junitxml --output-file test-results/appinspect-mode-<<parameters.label>>.xml $PACKAGE
                if grep failures=\"[1-9] test-results/appinspect-mode-${TEST_PARM}.xml; then exit 1; else exit 0; fi

    jobs:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        executor: python37
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace
          - inspect:
              options: <<parameters.options>>
              label: <<parameters.label>>
          - store_artifacts:
              path: test-results
              destination: test-results
          - store_test_results:
              path: test-results
  splunk-app-test:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
        resource_class: xlarge
    commands:
      aio:
        parameters:
          splunk_version:
            description: Image version
            type: string
            default: latest
        steps:
          - attach_workspace:
              at: /tmp/workspace
          - run:
              name: Setup for testing
              command: |
                pip install -r requirements_dev.txt
                pip install git+https://github.com/pixelb/crudini        
                mkdir test-results
                cp -r /tmp/workspace/output output
          - run:
              name: Splunk Testing
              command: |
                # Start Splunk
                ls -l deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf
                export SPLUNK_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk_version>>" VERSION)
                export SPLUNK_APP_ID=$(crudini --get package/default/app.conf id name)
                export SPLUNK_APP_PACKAGE=output/$(ls output/)
                docker-compose -f docker-compose-ci.yml build
                docker-compose -f docker-compose-ci.yml up -d splunk                
                until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done
                # Run a Splunk Diag
                mkdir /tmp/diag
                diag=$(docker-compose -f docker-compose-ci.yml exec splunk sudo -u splunk /opt/splunk/bin/splunk diag | grep "Splunk diagnosis file created" | sed -n 's/.* \(\/.*\.gz\)/\1/p') 
                docker-compose -f docker-compose-ci.yml exec splunk sudo chmod +r ${diag//[$'\t\r\n']}
                docker cp project_splunk_1:${diag//[$'\t\r\n']} /tmp/diag
                # Check with btool
                docker-compose -f docker-compose-ci.yml exec splunk sudo /opt/splunk/bin/splunk cmd btool check
                docker-compose -f docker-compose-ci.yml up -d splunk
                sleep 30
                # Run the tests
                docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test
              no_output_timeout: 2h
          - run:
              name: Splunk Get Results
              when: always
              command: |
                # Collect Results
                docker container create --name dummy \
                                    -v project_results:/home/circleci/work/test-results \
                                    registry.access.redhat.com/ubi7/ubi
                docker cp dummy:/home/circleci/work/test-results/test.xml test-results/  || true
                docker cp dummy:/home/circleci/work/test-results/cim-compliance-report.md test-results/ || true

    jobs:
      aio:
        parameters:
          splunk_version:
            description: Image version
            type: string
            default: latest
        executor: python37
        steps:
          - checkout
          - run: git submodule sync
          - run: git submodule update --init
          - setup_remote_docker:
              docker_layer_caching: true
          - aio:
              splunk_version: <<parameters.splunk_version>>
          - store_artifacts:
              path: /tmp/diag
              destination: test-diag
          - store_artifacts:
              path: test-results
              destination: test-results
          - store_test_results:
              path: test-results

  splunk-release:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        steps:
          - run:
              name: TAG
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                ./semtag <<parameters.tag_level>>
      merge-to-master:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - run:
              name: Merge
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                git config --global user.email "addonreleasesrv@splunk.com"
                git config --global user.name "Add on release service"
                git pull origin master
                git merge master -m "Merge from master"
                git checkout master
                git merge develop
                git push
    jobs:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        executor: python37
        steps:
          - checkout
          - tag:
              tag_level: <<parameters.tag_level>>
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>
      merge-to-master:
        executor: python37
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - checkout
          - merge-to-master:
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>

jobs:
  publish-gh:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - go/install
      - run:
          name: "Publish on GitHub"
          command: |
            PATH=$PATH:/usr/local/go/bin
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            source /tmp/workspace/build/VERSION
            go get -v -u github.com/tcnksm/ghr            
            $HOME/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${ISPRE} -delete ${VERSION} $PACKAGE

  publish-sbase:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install utils
          command: |
            pip install git+https://github.com/pixelb/crudini
      - run:
          name: "Publish on Splunkbase"
          command: |
            source .splunkbase
            source /tmp/workspace/build/VERSION
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            PACKAGE_ID=$(crudini --get package/default/app.conf id name)
            [ "${ISPRE}" == "-prerelease" ] && SPLUNKBASE_VIS="false" || SPLUNKBASE_VIS="true"                
            curl -u ${SPLUNKBASE_USERNAME}:${SPLUNKBASE_PASSWORD}  --request POST https://splunkbase.splunk.com/api/v1/app/${SPLUNKBASE_ID}/new_release/ -F "files[]=@${PACKAGE}" -F "filename=${PACKAGE_ID}.spl" -F "splunk_versions=${SPLUNKBASE_SPLUNK_VERSION}" -F "visibility=${SPLUNKBASE_VIS}"
  reuse:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install
          command: |
            python -m venv ~/.venv
            source ~/.venv/bin/activate
            pip install reuse
      - run:
          name: reuse-lint
          command: |
            source ~/.venv/bin/activate
            reuse lint
workflows:
  build:
    jobs:
      - reuse:
          filters:
            branches:
              only: /.*/
      - splunk-app-package/package:
          name: package
          filters:
            branches:
              only: /.*/
      - splunk-app-inspect/inspect:
          matrix:
            parameters:
              label: ["appinspect", "cloud"]
          filters:
            branches:
              only: /.*/
          requires:
            - package
      - splunk-app-test/aio:
          requires:
            - package
          matrix:
            parameters:
              splunk_version: ["7.2", "7.3", "8.0"]
          filters:
            branches:
              only: /.*/
      - splunk-release/tag:
          name: tag-alpha
          tag_level: alpha
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          filters:
            branches:
              only: develop
      - approval-tag-beta:
          requires:
            - tag-alpha
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          name: tag-beta
          tag_level: beta
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          requires:
            - approval-tag-beta
      - approval-merge-beta-to-master:
          requires:
            - tag-beta
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/merge-to-master:
          name: merge-beta-to-master
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          requires:
            - approval-merge-beta-to-master
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          name: tag-candidate
          tag_level: candidate
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          filters:
            branches:
              only: master
      - approval-tag-final-major:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-major
          tag_level: final -s major
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          requires:
            - approval-tag-final-major
      - approval-tag-final-minor:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-minor
          tag_level: final -s minor
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          requires:
            - approval-tag-final-minor
      - approval-tag-final-patch:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-patch
          tag_level: final -s patch
          gh_user: ${GH_USER}
          gh_token: ${GITHUB_TOKEN}
          requires:
            - approval-tag-final-patch
  publish:
    jobs:
      - splunk-app-package/package:
          name: package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
      - publish-gh:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
      - publish-sbase:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
